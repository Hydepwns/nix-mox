use serde_json::Value;
use std::collections::HashMap;

pub fn nix_mox_snippets() -> HashMap<String, Value> {
    let mut snippets = HashMap::new();

    // Script header template
    snippets.insert(
        "nixmox-header".to_string(),
        json!({
            "prefix": "nixmox-header",
            "body": [
                "#!/usr/bin/env nu",
                "",
                "# nix-mox script template",
                "# Generated by nix-mox Zed extension",
                "",
                "use ../../lib/config.nu *",
                "use ../../lib/logging.nu *",
                "use ../../lib/platform.nu *",
                "",
                "def main [] {",
                "    print \"Running nix-mox script...\"",
                "    ",
                "    # TODO: Add your script logic here",
                "    ",
                "    print \"Script completed successfully\"",
                "}",
                "",
                "if $env.PWD? == null {",
                "    $env.PWD = (pwd)",
                "}",
                "",
                "main"
            ],
            "description": "Complete nix-mox script template with imports"
        })
    );

    // Test function template
    snippets.insert(
        "nixmox-test".to_string(),
        json!({
            "prefix": "nixmox-test",
            "body": [
                "def test_${1:function_name} [] {",
                "    print \"Testing ${1:function_name}...\"",
                "    ",
                "    try {",
                "        # TODO: Add test logic here",
                "        ",
                "        track_test \"${1:function_name}\" \"unit\" \"passed\" 0.1",
                "    } catch {",
                "        track_test \"${1:function_name}\" \"unit\" \"failed\" 0.1",
                "    }",
                "}"
            ],
            "description": "Test function with error handling"
        })
    );

    // Error handling template
    snippets.insert(
        "nixmox-error".to_string(),
        json!({
            "prefix": "nixmox-error",
            "body": [
                "try {",
                "    # TODO: Add your code here",
                "    ",
                "} catch {",
                "    log \"ERROR\" $\"Operation failed: ($env.LAST_ERROR)\"",
                "    exit 1",
                "}"
            ],
            "description": "Try-catch with structured error handling"
        })
    );

    // Platform detection
    snippets.insert(
        "nixmox-platform".to_string(),
        json!({
            "prefix": "nixmox-platform",
            "body": [
                "let platform = (detect_platform)",
                "match $platform {",
                "    \"linux\" => {",
                "        # Linux-specific code",
                "    }",
                "    \"darwin\" => {",
                "        # macOS-specific code",
                "    }",
                "    \"windows\" => {",
                "        # Windows-specific code",
                "    }",
                "    _ => {",
                "        log \"ERROR\" \"Unsupported platform: ($platform)\"",
                "        exit 1",
                "    }",
                "}"
            ],
            "description": "Platform-specific code blocks"
        })
    );

    // Configuration access
    snippets.insert(
        "nixmox-config".to_string(),
        json!({
            "prefix": "nixmox-config",
            "body": [
                "let config = (load_config)",
                "let value = (get_config_value $config \"${1:config.path}\")",
                "print $\"Config value: ($value)\""
            ],
            "description": "Configuration loading and access"
        })
    );

    // Performance monitoring
    snippets.insert(
        "nixmox-perf".to_string(),
        json!({
            "prefix": "nixmox-perf",
            "body": [
                "let start_time = (date now)",
                "let start_memory = (sys mem | get used)",
                "",
                "# TODO: Add your code here",
                "",
                "let end_time = (date now)",
                "let end_memory = (sys mem | get used)",
                "let duration = ($end_time - $start_time)",
                "let memory_used = ($end_memory - $start_memory)",
                "",
                "log \"INFO\" $\"Operation completed in ($duration) using ($memory_used) memory\""
            ],
            "description": "Performance monitoring wrapper"
        })
    );

    // Logging function
    snippets.insert(
        "nixmox-log".to_string(),
        json!({
            "prefix": "nixmox-log",
            "body": [
                "log \"${1:INFO}\" \"${2:message}\""
            ],
            "description": "Logging function call"
        })
    );

    // Security validation
    snippets.insert(
        "nixmox-security".to_string(),
        json!({
            "prefix": "nixmox-security",
            "body": [
                "let security_result = (validate_security \"${1:file_path}\")",
                "if not $security_result.valid {",
                "    log \"ERROR\" $\"Security validation failed: ($security_result.errors)\"",
                "    exit 1",
                "}"
            ],
            "description": "Security validation blocks"
        })
    );

    // Metrics tracking
    snippets.insert(
        "nixmox-metrics".to_string(),
        json!({
            "prefix": "nixmox-metrics",
            "body": [
                "track_metric \"${1:metric_name}\" ${2:value} \"${3:unit}\""
            ],
            "description": "Custom metrics tracking"
        })
    );

    // Common imports
    snippets.insert(
        "nixmox-imports".to_string(),
        json!({
            "prefix": "nixmox-imports",
            "body": [
                "use ../../lib/config.nu *",
                "use ../../lib/logging.nu *",
                "use ../../lib/platform.nu *",
                "use ../../lib/metrics.nu *",
                "use ../../lib/security.nu *"
            ],
            "description": "Common nix-mox module imports"
        })
    );

    snippets
}

fn json!(value: serde_json::Value) -> serde_json::Value {
    value
}
