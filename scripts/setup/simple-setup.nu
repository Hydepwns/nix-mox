#!/usr/bin/env nu

# Import unified libraries
use ../lib/unified-checks.nu
use ../lib/unified-error-handling.nu


# Simple working setup script for nix-mox
# Fixed version that actually works

def main [
    --type: string = "ask"  # Setup type: personal, gaming, development, server, minimal, ask
] {
    print "üöÄ nix-mox Simple Setup"
    print "======================="
    print ""

    # Determine setup type
    let setup_type = if $type == "ask" {
        print "Choose setup type:"
        print "1. personal      - Personal configuration (recommended)"
        print "2. gaming        - Gaming workstation"
        print "3. development   - Development environment" 
        print "4. server        - Server setup"
        print "5. minimal       - Minimal system"
        print ""
        
        # Read from stdin in a more reliable way
        let raw_choice = (bash -c "read -p 'Enter choice (1-5 or name): ' choice; echo $choice")
        
        match $raw_choice {
            "1" => "personal"
            "2" => "gaming"
            "3" => "development"
            "4" => "server" 
            "5" => "minimal"
            "personal" => "personal"
            "gaming" => "gaming"
            "development" => "development"
            "server" => "server"
            "minimal" => "minimal"
            _ => {
                print "Invalid choice, defaulting to personal"
                "personal"
            }
        }
    } else {
        $type
    }
    
    print $"Selected setup type: ($setup_type)"
    print ""

    # Check if required directories exist
    if not ("config" | path exists) {
        print "‚ùå config/ directory not found. Make sure you're in the nix-mox directory."
        exit 1
    }

    # Create personal directory if it doesn't exist
    mkdir config/personal

    # Setup based on type
    match $setup_type {
        "personal" => { setup_personal }
        "gaming" => { setup_gaming }
        "development" => { setup_development }
        "server" => { setup_server }
        "minimal" => { setup_minimal }
        _ => {
            print $"Unknown setup type: ($setup_type)"
            exit 1
        }
    }
}

def setup_personal [] {
    print "üéØ Personal Configuration Setup"
    print "==============================="
    print ""

    # Get basic info using bash for reliable input
    let username = (bash -c "read -p 'Username [nixos]: ' username; echo ${username:-nixos}")
    let hostname = (bash -c "read -p 'Hostname [nixos]: ' hostname; echo ${hostname:-nixos}")
    let timezone = (bash -c "read -p 'Timezone [UTC]: ' timezone; echo ${timezone:-UTC}")
    let email = (bash -c "read -p 'Email [user@example.com]: ' email; echo ${email:-user@example.com}")
    
    print ""
    print $"Creating configuration for user: ($username)"
    print $"Hostname: ($hostname)"
    print $"Timezone: ($timezone)"

    # Create basic user configuration
    let user_config = $"# Personal User Configuration
# Generated by simple-setup.nu

{ config, pkgs, ... }:

{
  # System user configuration
  users.users.($username) = {
    isNormalUser = true;
    description = \"($username)\";
    extraGroups = [ \"wheel\" \"networkmanager\" \"video\" \"audio\" ];
    shell = pkgs.bash;
  };

  # System configuration
  networking.hostName = \"($hostname)\";
  time.timeZone = \"($timezone)\";

  # Enable common services
  services.openssh.enable = true;
  services.xserver.enable = true;
  services.xserver.displayManager.sddm.enable = true;
  services.xserver.desktopManager.plasma5.enable = true;

  # Basic packages
  environment.systemPackages = with pkgs; [
    wget curl git vim nano htop firefox
  ];
}
"
    
    $user_config | save config/personal/user.nix

    # Create simple .env file
    let env_content = $"# nix-mox Environment Configuration
NIXMOX_USERNAME=($username)
NIXMOX_HOSTNAME=($hostname)
NIXMOX_TIMEZONE=($timezone)
NIXMOX_EMAIL=($email)
"
    
    $env_content | save .env

    print "‚úÖ Personal configuration created!"
    print ""
    print "üìã Next steps:"
    print "1. Review config/personal/user.nix"
    print "2. Run safety check before rebuilding:"
    print "   nix-shell -p nushell --run 'nu scripts/validation/pre-rebuild-safety-check.nu'"
    print "3. If safe, rebuild system:"
    print "   nix-shell -p nushell --run 'nu scripts/maintenance/safe-rebuild.nu'"
}

def setup_gaming [] {
    print "üéÆ Gaming Configuration Setup"
    print "============================="
    
    # First create personal config
    setup_personal
    
    # Copy gaming template  
    cp config/templates/gaming.nix config/nixos/configuration.nix
# Note: For modular gaming configuration, use:
# cp -r config/nixos/gaming/ config/nixos/
# And import ./gaming/default.nix in your configuration.nix
    
    print "‚úÖ Gaming configuration applied!"
    print ""
    print "üìã Gaming-specific next steps:"
    print "1. Build system: nix-shell -p nushell --run 'nu scripts/maintenance/safe-rebuild.nu'"
    print "2. Enter gaming shell: nix develop .#gaming"
    print "3. Launch Steam, Lutris, or Heroic launcher"
}

def setup_development [] {
    print "üíª Development Configuration Setup"
    print "=================================="
    
    # First create personal config
    setup_personal
    
    # Copy development template
    cp config/templates/development.nix config/nixos/configuration.nix
    
    print "‚úÖ Development configuration applied!"
    print ""
    print "üìã Development-specific next steps:"
    print "1. Build system: nix-shell -p nushell --run 'nu scripts/maintenance/safe-rebuild.nu'"
    print "2. Enter development shell: nix develop .#development"
    print "3. Open IDE: code or cursor"
}

def setup_server [] {
    print "üñ•Ô∏è  Server Configuration Setup"
    print "============================="
    
    # First create personal config
    setup_personal
    
    # Copy server template
    cp config/templates/server.nix config/nixos/configuration.nix
    
    print "‚úÖ Server configuration applied!"
    print ""
    print "üìã Server-specific next steps:"
    print "1. Build system: nix-shell -p nushell --run 'nu scripts/maintenance/safe-rebuild.nu'"
    print "2. Configure firewall settings in config/nixos/configuration.nix"
    print "3. Set up SSH keys and secure access"
}

def setup_minimal [] {
    print "‚ö° Minimal Configuration Setup"
    print "============================="
    
    # First create personal config
    setup_personal
    
    # Copy minimal template
    cp config/templates/minimal.nix config/nixos/configuration.nix
    
    print "‚úÖ Minimal configuration applied!"
    print ""
    print "üìã Minimal-specific next steps:"
    print "1. Build system: nix-shell -p nushell --run 'nu scripts/maintenance/safe-rebuild.nu'"
    print "2. Add packages as needed to config/personal/user.nix"
    print "3. Keep system lean and focused"
}