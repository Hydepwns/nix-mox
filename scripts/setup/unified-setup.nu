#!/usr/bin/env nu

# Import unified libraries
use ../lib/unified-checks.nu
use ../lib/unified-error-handling.nu


# nix-mox Unified Setup Script - Fixed Version
# Combines best features from all setup scripts with reliable input handling

def main [
    --type: string = "ask"  # Setup type: personal, gaming, development, server, minimal, ask
    --non-interactive       # Non-interactive mode for CI/automation
] {
    print "üöÄ nix-mox Unified Setup"
    print "========================"
    print ""

    # Check prerequisites
    if not ("config" | path exists) {
        print "‚ùå config/ directory not found. Make sure you're in the nix-mox directory."
        exit 1
    }

    # Create personal directory if it doesn't exist
    mkdir config/personal

    # Determine setup type with reliable input handling
    let setup_type = if $type == "ask" and not $non_interactive {
        print "Choose setup type:"
        print "1. personal      - Personal configuration (recommended)"
        print "2. gaming        - Gaming workstation"
        print "3. development   - Development environment" 
        print "4. server        - Server setup"
        print "5. minimal       - Minimal system"
        print ""
        
        # Use bash for reliable input handling (from simple-setup.nu)
        let raw_choice = (bash -c "read -p 'Enter choice (1-5 or name): ' choice; echo $choice")
        
        match $raw_choice {
            "1" => "personal"
            "2" => "gaming"
            "3" => "development"
            "4" => "server" 
            "5" => "minimal"
            "personal" => "personal"
            "gaming" => "gaming"
            "development" => "development"
            "server" => "server"
            "minimal" => "minimal"
            _ => {
                print "Invalid choice, defaulting to personal"
                "personal"
            }
        }
    } else {
        $type
    }
    
    print $"Selected setup type: ($setup_type)"
    print ""

    # Setup based on type
    match $setup_type {
        "personal" => { setup_personal $non_interactive }
        "gaming" => { setup_gaming $non_interactive }
        "development" => { setup_development $non_interactive }
        "server" => { setup_server $non_interactive }
        "minimal" => { setup_minimal $non_interactive }
        _ => {
            print $"Unknown setup type: ($setup_type)"
            exit 1
        }
    }
}

def setup_personal [non_interactive: bool = false] {
    print "üéØ Personal Configuration Setup"
    print "==============================="
    print ""

    # Check if personal config already exists
    if (ls config/personal/user.nix | length) > 0 and not $non_interactive {
        print "‚ö†Ô∏è  Personal configuration already exists!"
        let response = (bash -c "read -p 'Do you want to overwrite it? (y/N): ' response; echo $response")
        if $response != "y" and $response != "Y" {
            print "Setup cancelled."
            exit 0
        }
    }

    # Get user input with bash for reliability (from simple-setup.nu)
    if not $non_interactive {
        print "üìù Please provide your personal information:"
    }
    
    let username = if $non_interactive { 
        $env.USER | default "nixos" 
    } else { 
        bash -c "read -p 'Username [nixos]: ' username; echo ${username:-nixos}"
    }
    let hostname = if $non_interactive { 
        "nixos" 
    } else { 
        bash -c "read -p 'Hostname [nixos]: ' hostname; echo ${hostname:-nixos}"
    }
    let timezone = if $non_interactive { 
        "UTC" 
    } else { 
        bash -c "read -p 'Timezone [UTC]: ' timezone; echo ${timezone:-UTC}"
    }
    let email = if $non_interactive { 
        "user@example.com" 
    } else { 
        bash -c "read -p 'Email [user@example.com]: ' email; echo ${email:-user@example.com}"
    }
    let git_username = if $non_interactive { 
        $username 
    } else { 
        bash -c $"read -p 'Git username [($username)]: ' git_username; echo ${git_username:-($username)}"
    }
    let git_email = if $non_interactive { 
        $email 
    } else { 
        bash -c $"read -p 'Git email [($email)]: ' git_email; echo ${git_email:-($email)}"
    }

    if not $non_interactive {
        print ""
        print $"Creating configuration for user: ($username)"
        print $"Hostname: ($hostname)"
        print $"Timezone: ($timezone)"
    }

    # Create personal configuration (simplified from simple-setup.nu)
    let user_config = $"# Personal User Configuration
# Generated by unified setup script

{ config, pkgs, ... }:

{
  # System user configuration
  users.users.($username) = {
    isNormalUser = true;
    description = \"($username)\";
    extraGroups = [ \"wheel\" \"networkmanager\" \"video\" \"audio\" ];
    shell = pkgs.bash;
  };

  # System configuration
  networking.hostName = \"($hostname)\";
  time.timeZone = \"($timezone)\";

  # Enable common services
  services.openssh.enable = true;
  services.xserver.enable = true;
  services.xserver.displayManager.sddm.enable = true;
  services.xserver.desktopManager.plasma5.enable = true;

  # Git configuration
  programs.git = {
    enable = true;
    config = {
      user.name = \"($git_username)\";
      user.email = \"($git_email)\";
      init.defaultBranch = \"main\";
    };
  };

  # Basic packages
  environment.systemPackages = with pkgs; [
    wget curl git vim nano htop firefox
  ];
}"
    
    $user_config | save -f config/personal/user.nix

    # Create simple .env file
    let env_content = $"# nix-mox Environment Configuration
NIXMOX_USERNAME=($username)
NIXMOX_HOSTNAME=($hostname)
NIXMOX_TIMEZONE=($timezone)
NIXMOX_EMAIL=($email)
NIXMOX_GIT_USERNAME=($git_username)
NIXMOX_GIT_EMAIL=($git_email)"
    
    $env_content | save -f .env

    print "‚úÖ Personal configuration created!"
    print ""
    print "üìã Next steps:"
    print "1. Review config/personal/user.nix"
    print "2. Run safety check before rebuilding:"
    print "   nix-shell -p nushell --run 'nu scripts/validation/pre-rebuild-safety-check.nu'"
    print "3. If safe, rebuild system:"
    print "   nix-shell -p nushell --run 'nu scripts/maintenance/safe-rebuild.nu'"
}

def setup_gaming [non_interactive: bool = false] {
    print "üéÆ Gaming Configuration Setup"
    print "============================="
    
    # First create personal config
    setup_personal $non_interactive
    
    # Copy gaming template  
    cp config/templates/gaming.nix config/nixos/configuration.nix
# Note: For modular gaming configuration, use:
# cp -r config/nixos/gaming/ config/nixos/
# And import ./gaming/default.nix in your configuration.nix
    
    print "‚úÖ Gaming configuration applied!"
    print ""
    print "üìã Gaming-specific next steps:"
    print "1. Build system: nix-shell -p nushell --run 'nu scripts/maintenance/safe-rebuild.nu'"
    print "2. Enter gaming shell: nix develop .#gaming"
    print "3. Launch Steam, Lutris, or Heroic launcher"
}

def setup_development [non_interactive: bool = false] {
    print "üíª Development Configuration Setup"
    print "=================================="
    
    # First create personal config
    setup_personal $non_interactive
    
    # Copy development template
    cp config/templates/development.nix config/nixos/configuration.nix
    
    print "‚úÖ Development configuration applied!"
    print ""
    print "üìã Development-specific next steps:"
    print "1. Build system: nix-shell -p nushell --run 'nu scripts/maintenance/safe-rebuild.nu'"
    print "2. Enter development shell: nix develop .#development"
    print "3. Open IDE: code or cursor"
}

def setup_server [non_interactive: bool = false] {
    print "üñ•Ô∏è  Server Configuration Setup"
    print "============================="
    
    # First create personal config
    setup_personal $non_interactive
    
    # Copy server template
    cp config/templates/server.nix config/nixos/configuration.nix
    
    print "‚úÖ Server configuration applied!"
    print ""
    print "üìã Server-specific next steps:"
    print "1. Build system: nix-shell -p nushell --run 'nu scripts/maintenance/safe-rebuild.nu'"
    print "2. Configure firewall settings in config/nixos/configuration.nix"
    print "3. Set up SSH keys and secure access"
}

def setup_minimal [non_interactive: bool = false] {
    print "‚ö° Minimal Configuration Setup"
    print "============================="
    
    # First create personal config
    setup_personal $non_interactive
    
    # Copy minimal template
    cp config/templates/minimal.nix config/nixos/configuration.nix
    
    print "‚úÖ Minimal configuration applied!"
    print ""
    print "üìã Minimal-specific next steps:"
    print "1. Build system: nix-shell -p nushell --run 'nu scripts/maintenance/safe-rebuild.nu'"
    print "2. Add packages as needed to config/personal/user.nix"
    print "3. Keep system lean and focused"
}

# Show help
def show_help [] {
    print "nix-mox Unified Setup Script"
    print "============================"
    print ""
    print "Usage:"
    print "  nu scripts/setup/unified-setup.nu                     # Interactive setup"
print "  nu scripts/setup/unified-setup.nu --type personal     # Direct setup type"
print "  nu scripts/setup/unified-setup.nu --non-interactive   # Non-interactive mode"
print "  nu scripts/setup/unified-setup.nu --help              # Show this help"
    print ""
    print "Setup Types:"
    print "  personal     - Personal configuration (recommended)"
    print "  gaming       - Gaming workstation"
    print "  development  - Development environment"
    print "  server       - Server setup"
    print "  minimal      - Minimal system"
    print ""
    print "Features:"
    print "  ‚úÖ Reliable bash-based input handling"
    print "  ‚úÖ Safety script integration"
    print "  ‚úÖ Template system support"
    print "  ‚úÖ Non-interactive mode for automation"
    print ""
    print "Examples:"
    print "  nu scripts/setup/unified-setup.nu --type gaming"
print "  nu scripts/setup/unified-setup.nu --non-interactive --type server"
}

# Check for help flag
if ($env | get --ignore-errors ARGS | default [] | any { |arg| $arg == "--help" or $arg == "-h" }) {
    show_help
    exit 0
}