name: Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        nix-channel: [nixos-unstable]

    steps:
    - uses: actions/checkout@v4

    - name: Install Nix
      uses: cachix/install-nix-action@v31

    # Use setup-nu action for faster Nushell installation
    - name: Setup Nushell
      uses: hustcer/setup-nu@v3
      with:
        version: "0.104"  # Use a valid stable version
        check-latest: false

    - name: Check for Cachix Key
      id: cachix-key-check
      shell: bash
      run: |
        # Temporarily disable Cachix until credentials are properly configured
        echo "present=false" >> $GITHUB_OUTPUT
        echo "Cachix temporarily disabled - skipping Cachix operations"

    - name: Setup Cachix
      if: steps.cachix-key-check.outputs.present == 'true'
      uses: cachix/cachix-action@v16
      with:
        name: nix-mox
        authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
        signingKey: '${{ secrets.CACHIX_SIGNING_KEY }}'
      continue-on-error: true

    - name: Run nix flake check (Linux only)
      if: runner.os == 'Linux'
      shell: nu {0}
      run: |
        # Set CI environment variable to disable NixOS configs
        $env.CI = "true"
        # Run flake check with timeout and accept flake config
        # Use cross-platform timeout approach
        if (which timeout | is-empty) {
          # No timeout available, run without timeout
          nix flake check --accept-flake-config
        } else {
          # Use timeout command
          timeout 300 nix flake check --accept-flake-config
        }

    - name: Run basic flake evaluation (macOS)
      if: runner.os == 'macOS'
      shell: nu {0}
      run: |
        # Set CI environment variable to disable NixOS configs
        $env.CI = "true"
        # On macOS, only evaluate the flake without building packages
        # This avoids architecture mismatch errors and slow builds
        nix flake show --accept-flake-config
        nix flake metadata --accept-flake-config

    - name: Find and prepare coverage report
      if: runner.os == 'Linux'
      shell: nu {0}
      run: |
        # Find the coverage file in the temporary directory
        let coverage_file = (find /tmp -name "coverage.json" -path "*/nix-mox-tests/*" | first)
        if ($coverage_file | is-empty) {
          print "No coverage file found"
        } else {
          print $"Found coverage file at: ($coverage_file)"
          # Copy to a known location for upload
          mkdir -p coverage-tmp/nix-mox-tests
          cp $coverage_file coverage-tmp/nix-mox-tests/coverage.json
          print "Coverage file copied to coverage-tmp/nix-mox-tests/coverage.json"

          # Convert to codecov format
          let coverage = (open 'coverage-tmp/nix-mox-tests/coverage.json' | from json)
          let pass_rate = ($coverage | get summary.pass_rate)
          let total_tests = ($coverage | get summary.total_tests)
          let passed_tests = ($coverage | get summary.passed_tests)

          # Create codecov-compatible format
          let codecov_report = {
            coverage: {
              total: $total_tests
              passed: $passed_tests
              rate: $pass_rate
              timestamp: (date now | into int)
            }
            results: ($coverage | get results | each { |test|
              {
                name: $test.name
                status: $test.status
                duration: $test.duration
                category: $test.category
              }
            })
          }

          $codecov_report | to json | save --force 'coverage-tmp/codecov.json'
          print "Codecov report generated at coverage-tmp/codecov.json"
        }

    - name: Upload coverage report to artifacts
      if: runner.os == 'Linux'
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: coverage-tmp/nix-mox-tests/coverage.json
        if-no-files-found: ignore

    - name: Upload coverage to Codecov
      if: runner.os == 'Linux'
      uses: codecov/codecov-action@v5
      with:
        files: coverage-tmp/codecov.json
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        verbose: true
        token: ${{ secrets.CODECOV_TOKEN }}

    - name: Check test coverage
      if: runner.os == 'Linux'
      shell: nu {0}
      run: |
        # Find the coverage file and check it
        let coverage_file = (find /tmp -name "coverage.json" -path "*/nix-mox-tests/*" | first)
        if ($coverage_file | is-empty) {
          print "No coverage file found, skipping coverage check"
        } else {
          print $"Checking coverage file: ($coverage_file)"
          let coverage = (open $coverage_file | from json)
          let pass_rate = ($coverage | get summary.pass_rate)
          print $"Pass rate: ($pass_rate)%"
          if $pass_rate < 90 {
            error make { msg: 'Test coverage below 90%' }
          }
        }
