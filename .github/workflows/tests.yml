name: Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        nix-channel: [nixos-unstable]

    steps:
    - uses: actions/checkout@v4

    - name: Install Nix
      uses: cachix/install-nix-action@v31

    - name: Check for Cachix Key
      id: cachix-key-check
      shell: bash
      run: |
        # Temporarily disable Cachix until credentials are properly configured
        echo "present=false" >> $GITHUB_OUTPUT
        echo "Cachix temporarily disabled - skipping Cachix operations"
        # if [ -n "${{ secrets.CACHIX_SIGNING_KEY }}" ] && [ -n "${{ secrets.CACHIX_AUTH_TOKEN }}" ]; then
        #   echo "present=true" >> $GITHUB_OUTPUT
        #   echo "Cachix credentials found"
        # else
        #   echo "present=false" >> $GITHUB_OUTPUT
        #   echo "Cachix credentials missing - skipping Cachix operations"
        # fi

    - name: Setup Cachix
      if: steps.cachix-key-check.outputs.present == 'true'
      uses: cachix/cachix-action@v15
      with:
        name: nix-mox
        authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
        signingKey: '${{ secrets.CACHIX_SIGNING_KEY }}'
      continue-on-error: true

    - name: Run nix flake check (Linux only)
      if: runner.os == 'Linux'
      run: |
        # Set CI environment variable to disable NixOS configs
        export CI=true
        # Run flake check with timeout and accept flake config
        # Use cross-platform timeout approach
        if command -v timeout >/dev/null 2>&1; then
          # Linux: use timeout command
          timeout 300 nix flake check --accept-flake-config
        else
          # macOS: use gtimeout if available, otherwise run without timeout
          if command -v gtimeout >/dev/null 2>&1; then
            gtimeout 300 nix flake check --accept-flake-config
          else
            # No timeout available, run without timeout
            nix flake check --accept-flake-config
          fi
        fi

    - name: Run basic flake evaluation (macOS)
      if: runner.os == 'macOS'
      run: |
        # Set CI environment variable to disable NixOS configs
        export CI=true
        # On macOS, only evaluate the flake without building packages
        # This avoids architecture mismatch errors
        nix flake show --accept-flake-config
        nix flake metadata --accept-flake-config

    - name: Find and prepare coverage report
      if: runner.os == 'Linux'
      run: |
        # Find the coverage file in the temporary directory
        COVERAGE_FILE=$(find /tmp -name "coverage.json" -path "*/nix-mox-tests/*" 2>/dev/null | head -1)
        if [ -n "$COVERAGE_FILE" ]; then
          echo "Found coverage file at: $COVERAGE_FILE"
          # Copy to a known location for upload
          mkdir -p coverage-tmp/nix-mox-tests
          cp "$COVERAGE_FILE" coverage-tmp/nix-mox-tests/coverage.json
          echo "Coverage file copied to coverage-tmp/nix-mox-tests/coverage.json"

          # Convert to codecov format
          nix develop --command nu -c "
            let coverage = (open 'coverage-tmp/nix-mox-tests/coverage.json' | from json)
            let pass_rate = ($coverage | get summary.pass_rate)
            let total_tests = ($coverage | get summary.total_tests)
            let passed_tests = ($coverage | get summary.passed_tests)

            # Create codecov-compatible format
            let codecov_report = {
              coverage: {
                total: $total_tests
                passed: $passed_tests
                rate: $pass_rate
                timestamp: (date now | into int)
              }
              results: ($coverage | get results | each { |test|
                {
                  name: $test.name
                  status: $test.status
                  duration: $test.duration
                  category: $test.category
                }
              })
            }

            $codecov_report | to json | save --force 'coverage-tmp/codecov.json'
          "
          echo "Codecov report generated at coverage-tmp/codecov.json"
        else
          echo "No coverage file found"
        fi

    - name: Upload coverage report to artifacts
      if: runner.os == 'Linux'
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: coverage-tmp/nix-mox-tests/coverage.json
        if-no-files-found: ignore

    - name: Upload coverage to Codecov
      if: runner.os == 'Linux'
      uses: codecov/codecov-action@v4
      with:
        file: coverage-tmp/codecov.json
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        verbose: true
        token: ${{ secrets.CODECOV_TOKEN }}

    - name: Check test coverage
      if: runner.os == 'Linux'
      run: |
        # Find the coverage file and check it
        COVERAGE_FILE=$(find /tmp -name "coverage.json" -path "*/nix-mox-tests/*" 2>/dev/null | head -1)
        if [ -n "$COVERAGE_FILE" ]; then
          echo "Checking coverage file: $COVERAGE_FILE"
          nix develop --command nu -c "
            let coverage = (open '$COVERAGE_FILE' | from json)
            let pass_rate = ($coverage | get summary.pass_rate)
            print 'Pass rate: ' + ($pass_rate | into string) + '%'
            if $pass_rate < 90 {
              error make { msg: 'Test coverage below 90%' }
            }
          "
        else
          echo "No coverage file found, skipping coverage check"
        fi
