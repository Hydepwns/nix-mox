name: CI (Simplified)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        nix-version: ['2.20.1']
      fail-fast: false
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Nix
        uses: cachix/install-nix-action@v31

      - name: Setup Nushell
        uses: hustcer/setup-nu@v3
        with:
          version: "0.104"
          check-latest: false

      - name: Setup Cachix
        uses: cachix/cachix-action@v16
        with:
          name: nix-mox
          authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
          signingKey: '${{ secrets.CACHIX_SIGNING_KEY }}'
        continue-on-error: true

      - name: Build packages
        shell: nu {0}
        run: |
          print $"Building packages for ${{ matrix.os }}..."

          if ${{ matrix.os }} == 'macOS' {
            # Build macOS-specific packages
            nix build .#homebrew-setup .#macos-maintenance .#xcode-setup .#security-audit --accept-flake-config --no-link --timeout 1800
          } else {
            # Build Linux packages
            nix build .#proxmox-update .#nixos-flake-update --accept-flake-config --no-link --timeout 1800
          }

          # Build common packages
          nix build .#install .#uninstall --accept-flake-config --no-link --timeout 1800

          print "‚úÖ Package builds completed"
        continue-on-error: true

      - name: Push packages to Cachix
        if: success() && github.event_name == 'push'
        shell: nu {0}
        run: |
          print "üì¶ Pushing packages to Cachix..."

          if ${{ matrix.os }} == 'macOS' {
            # Push macOS-specific packages
            let homebrew_path = (nix build .#homebrew-setup --accept-flake-config --no-link --print-out-paths --quiet)
            let maintenance_path = (nix build .#macos-maintenance --accept-flake-config --no-link --print-out-paths --quiet)
            let xcode_path = (nix build .#xcode-setup --accept-flake-config --no-link --print-out-paths --quiet)
            let security_path = (nix build .#security-audit --accept-flake-config --no-link --print-out-paths --quiet)

            echo $homebrew_path | cachix push nix-mox
            echo $maintenance_path | cachix push nix-mox
            echo $xcode_path | cachix push nix-mox
            echo $security_path | cachix push nix-mox
          } else {
            # Push Linux packages
            let proxmox_path = (nix build .#proxmox-update --accept-flake-config --no-link --print-out-paths --quiet)
            let flake_path = (nix build .#nixos-flake-update --accept-flake-config --no-link --print-out-paths --quiet)

            echo $proxmox_path | cachix push nix-mox
            echo $flake_path | cachix push nix-mox
          }

          # Push common packages
          let install_path = (nix build .#install --accept-flake-config --no-link --print-out-paths --quiet)
          let uninstall_path = (nix build .#uninstall --accept-flake-config --no-link --print-out-paths --quiet)

          echo $install_path | cachix push nix-mox
          echo $uninstall_path | cachix push nix-mox

          print "‚úÖ Packages pushed to Cachix successfully"
        continue-on-error: true

      - name: Run comprehensive tests
        uses: ./.github/actions/run-tests
        with:
          test-suites: 'unit,integration,storage,performance'
          verbose: 'true'
          generate-coverage: 'true'
        continue-on-error: true

      - name: Run flake check
        shell: nu {0}
        run: |
          $env.CI = "true"
          print "üîç Running flake check..."
          try {
            nix flake check --accept-flake-config --impure
            print "‚úÖ Flake check completed successfully"
          } catch {
            print $"‚ö†Ô∏è Flake check failed: ($env.LAST_EXIT_CODE)"
          }
        continue-on-error: true

      - name: Upload coverage artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.os }}
          path: coverage-tmp/
          if-no-files-found: ignore

      - name: Upload to Codecov
        if: always()
        uses: codecov/codecov-action@v5
        with:
          files: coverage-tmp/codecov.json
          flags: unittests
          name: codecov-${{ matrix.os }}
          fail_ci_if_error: false
          verbose: true
          token: ${{ secrets.CODECOV_TOKEN }}

  build-heavy-packages:
    runs-on: ubuntu-latest
    timeout-minutes: 120
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Nix
        uses: cachix/install-nix-action@v31

      - name: Setup Cachix
        uses: cachix/cachix-action@v16
        with:
          name: nix-mox
          authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
          signingKey: '${{ secrets.CACHIX_SIGNING_KEY }}'
        continue-on-error: true

      - name: Build heavy packages
        run: |
          echo "Building heavy packages..."
          for pkg in vzdump-backup zfs-snapshot; do
            echo "Building $pkg..."
            nix build .#$pkg --accept-flake-config --timeout 7200 || echo "Failed to build $pkg"
          done
        continue-on-error: true

      - name: Push heavy packages to Cachix
        if: success() && github.event_name == 'push'
        run: |
          echo "üì¶ Pushing heavy packages to Cachix..."

          # Push heavy packages if they built successfully
          for pkg in vzdump-backup zfs-snapshot; do
            echo "Pushing $pkg to Cachix..."
            nix build .#$pkg --accept-flake-config --no-link --print-out-paths --quiet | cachix push nix-mox || echo "Failed to push $pkg"
          done

          echo "‚úÖ Heavy packages pushed to Cachix"
        continue-on-error: true

      - name: Upload heavy package artifacts
        uses: actions/upload-artifact@v4
        with:
          name: heavy-packages
          path: result*
          if-no-files-found: ignore
        continue-on-error: true

  release:
    if: startsWith(github.ref, 'refs/tags/')
    needs: [build-and-test, build-heavy-packages]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Nix
        uses: cachix/install-nix-action@v31

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            result-*
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
