name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  validation:
    runs-on: ubuntu-latest
    name: Validation & Testing
    steps:
      - uses: actions/checkout@v4
      
      - uses: cachix/install-nix-action@v31
        with:
          extra_nix_config: |
            experimental-features = nix-command flakes
        
      - name: Setup Nushell
        run: |
          nix --extra-experimental-features "nix-command flakes" develop --command echo "Nushell installed"
          
      - name: Run Basic Validation
        run: |
          nix --extra-experimental-features "nix-command flakes" develop --command nu scripts/validate.nu basic --verbose
          
      - name: Run Configuration Validation  
        run: |
          nix --extra-experimental-features "nix-command flakes" develop --command nu scripts/validate.nu config --verbose
          
      - name: Check Flake Syntax
        run: |
          nix --extra-experimental-features "nix-command flakes" flake check --no-build
          
      - name: Test Configuration Build
        run: |
          nix --extra-experimental-features "nix-command flakes" build .#nixosConfigurations.nixos.config.system.build.toplevel --dry-run
          
      - name: Check Code Formatting
        run: |
          nix --extra-experimental-features "nix-command flakes" run .#fmt -- --check

  testing:
    runs-on: ubuntu-latest
    name: Testing & Coverage
    needs: validation
    steps:
      - uses: actions/checkout@v4
      
      - uses: cachix/install-nix-action@v31
        with:
          extra_nix_config: |
            experimental-features = nix-command flakes
            
      - name: Setup Test Environment
        run: |
          nix --extra-experimental-features "nix-command flakes" develop --command nu scripts/setup.nu automated --component testing --dry-run
          
      - name: Run Unit Tests
        run: |
          nix --extra-experimental-features "nix-command flakes" develop --command nu scripts/validate.nu basic
          
      - name: Generate Coverage Report
        run: |
          nix --extra-experimental-features "nix-command flakes" develop --command nu scripts/coverage.nu lcov --output coverage-tmp/lcov.info
          
      - name: Upload Coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: coverage-tmp/lcov.info
          fail_ci_if_error: false
          verbose: true

  security:
    runs-on: ubuntu-latest  
    name: Security Analysis
    needs: validation
    steps:
      - uses: actions/checkout@v4
      
      - uses: cachix/install-nix-action@v31
        with:
          extra_nix_config: |
            experimental-features = nix-command flakes
            
      - name: Run Security Analysis
        run: |
          nix --extra-experimental-features "nix-command flakes" develop --command nu scripts/dashboard.nu security --output security-report.json
          
      - name: Upload Security Report
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: security-report.json

  platform-compatibility:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        include:
          - os: ubuntu-latest
            platform: linux
          - os: macos-latest  
            platform: macos
    runs-on: ${{ matrix.os }}
    name: Platform Compatibility (${{ matrix.platform }})
    steps:
      - uses: actions/checkout@v4
      
      - uses: cachix/install-nix-action@v31
        with:
          extra_nix_config: |
            experimental-features = nix-command flakes
            
      - name: Test Platform Detection
        run: |
          nix --extra-experimental-features "nix-command flakes" develop --command nu -c 'use scripts/lib/platform.nu *; get_platform | to json'
          
      - name: Run Platform-Specific Validation
        run: |
          nix --extra-experimental-features "nix-command flakes" develop --command nu scripts/validate.nu basic --verbose
          
      - name: Test Platform Operations
        run: |
          nix --extra-experimental-features "nix-command flakes" develop --command nu -c 'use scripts/lib/platform-operations.nu *; maintenance_pipeline'

  documentation:
    runs-on: ubuntu-latest
    name: Documentation & Analysis
    needs: [validation, testing]
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      
      - uses: cachix/install-nix-action@v31
        with:
          extra_nix_config: |
            experimental-features = nix-command flakes
            
      - name: Generate System Report
        run: |
          nix --extra-experimental-features "nix-command flakes" develop --command nu -c 'use scripts/lib/analysis.nu *; generate_system_report --include-benchmarks true --output system-report.json'
          
      - name: Generate Dashboard Report
        run: |
          nix --extra-experimental-features "nix-command flakes" develop --command nu scripts/dashboard.nu analysis --output analysis-report.json
          
      - name: Upload Reports
        uses: actions/upload-artifact@v4
        with:
          name: analysis-reports
          path: |
            system-report.json
            analysis-report.json
