name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build_packages:
    runs-on: ubuntu-latest
    timeout-minutes: 90
    strategy:
      matrix:
        system: [x86_64-linux, aarch64-linux]
        nix-version: ['2.19.2', '2.20.1']
      fail-fast: false
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Install Nix
        uses: cachix/install-nix-action@v31
      - name: Check for Cachix Key
        id: cachix-key-check
        shell: bash
        run: |
          if [ -n "${{ secrets.CACHIX_SIGNING_KEY }}" ] && [ -n "${{ secrets.CACHIX_AUTH_TOKEN }}" ]; then
            echo "present=true" >> $GITHUB_OUTPUT
            echo "Cachix credentials found"
          else
            echo "present=false" >> $GITHUB_OUTPUT
            echo "Cachix credentials missing - skipping Cachix operations"
          fi
      - name: Push to Cachix
        if: steps.cachix-key-check.outputs.present == 'true'
        uses: cachix/cachix-action@v15
        with:
          name: nix-mox
          authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
          signingKey: '${{ secrets.CACHIX_SIGNING_KEY }}'
        continue-on-error: true
      - name: Build lightweight packages first
        run: |
          echo "Building lightweight packages for ${{ matrix.system }}..."
          nix build .#proxmox-update .#nixos-flake-update --system ${{ matrix.system }} --accept-flake-config --timeout 1800
        continue-on-error: true
      - name: Build heavy packages (aarch64 with reduced parallelism)
        if: matrix.system == 'aarch64-linux'
        run: |
          echo "Building heavy packages for aarch64 with reduced parallelism..."
          NIX_BUILD_CORES=1 nix build .#vzdump-backup .#zfs-snapshot --system ${{ matrix.system }} --accept-flake-config --timeout 5400
        continue-on-error: true
      - name: Build heavy packages (x86_64)
        if: matrix.system == 'x86_64-linux'
        run: |
          echo "Building heavy packages for x86_64..."
          nix build .#vzdump-backup .#zfs-snapshot --system ${{ matrix.system }} --accept-flake-config --timeout 5400
        continue-on-error: true
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: nix-mox-${{ matrix.system }}-${{ matrix.nix-version }}
          path: result*
          if-no-files-found: ignore
        continue-on-error: true

  test:
    needs: [build_packages]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Install Nix
        uses: cachix/install-nix-action@v31
      - name: Check for Cachix Key
        id: cachix-key-check
        shell: bash
        run: |
          if [ -n "${{ secrets.CACHIX_SIGNING_KEY }}" ] && [ -n "${{ secrets.CACHIX_AUTH_TOKEN }}" ]; then
            echo "present=true" >> $GITHUB_OUTPUT
            echo "Cachix credentials found"
          else
            echo "present=false" >> $GITHUB_OUTPUT
            echo "Cachix credentials missing - skipping Cachix operations"
          fi
      - name: Push to Cachix
        if: steps.cachix-key-check.outputs.present == 'true'
        uses: cachix/cachix-action@v15
        with:
          name: nix-mox
          authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
          signingKey: '${{ secrets.CACHIX_SIGNING_KEY }}'
        continue-on-error: true
      - name: Run tests
        run: |
          nix flake check --accept-flake-config --impure
        continue-on-error: true

      - name: Find and prepare coverage report
        if: always()
        run: |
          # Find the coverage file in the temporary directory
          COVERAGE_FILE=$(find /tmp -name "coverage.json" -path "*/nix-mox-tests/*" 2>/dev/null | head -1)
          if [ -n "$COVERAGE_FILE" ]; then
            echo "Found coverage file at: $COVERAGE_FILE"
            # Copy to a known location for upload
            mkdir -p coverage-tmp/nix-mox-tests
            cp "$COVERAGE_FILE" coverage-tmp/nix-mox-tests/coverage.json
            echo "Coverage file copied to coverage-tmp/nix-mox-tests/coverage.json"

            # Convert to codecov format
            nix develop --command nu -c "
              let coverage = (open 'coverage-tmp/nix-mox-tests/coverage.json' | from json)
              let pass_rate = ($coverage | get summary.pass_rate)
              let total_tests = ($coverage | get summary.total_tests)
              let passed_tests = ($coverage | get summary.passed_tests)

              # Create codecov-compatible format
              let codecov_report = {
                coverage: {
                  total: $total_tests
                  passed: $passed_tests
                  rate: $pass_rate
                  timestamp: (date now | into int)
                }
                results: ($coverage | get results | each { |test|
                  {
                    name: $test.name
                    status: $test.status
                    duration: $test.duration
                    category: $test.category
                  }
                })
              }

              $codecov_report | to json | save --force 'coverage-tmp/codecov.json'
            "
            echo "Codecov report generated at coverage-tmp/codecov.json"
          else
            echo "No coverage file found"
          fi

      - name: Upload coverage to Codecov
        if: always()
        uses: codecov/codecov-action@v5
        with:
          files: coverage-tmp/codecov.json
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
          verbose: true
          token: ${{ secrets.CODECOV_TOKEN }}

  release:
    if: startsWith(github.ref, 'refs/tags/')
    needs: [build_packages, test]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Install Nix
        uses: cachix/install-nix-action@v31
      - name: Setup Cachix (optional)
        run: |
          if [ -n "${{ secrets.CACHIX_SIGNING_KEY }}" ] && [ -n "${{ secrets.CACHIX_AUTH_TOKEN }}" ]; then
            echo "Setting up Cachix..."
            if command -v cachix &> /dev/null; then
              cachix use nix-mox
            else
              echo "Cachix not available, skipping setup"
            fi
          else
            echo "Cachix credentials not set, skipping Cachix setup"
          fi
        continue-on-error: true
      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            result-*
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
