name: 'Run nix-mox Tests'
description: 'Run comprehensive tests for nix-mox with coverage reporting'
inputs:
  test-suites:
    description: 'Test suites to run (unit, integration, storage, performance)'
    required: false
    default: 'unit,integration'
  verbose:
    description: 'Enable verbose output'
    required: false
    default: 'false'
  generate-coverage:
    description: 'Generate coverage report'
    required: false
    default: 'true'
runs:
  using: "composite"
  steps:
    - name: Setup test environment
      shell: nu {0}
      run: |
        $env.CI = "true"
        $env.TEST_TEMP_DIR = "/tmp/nix-mox-tests"

        print "üß™ Setting up test environment..."
        if not ($env.TEST_TEMP_DIR | path exists) {
          mkdir $env.TEST_TEMP_DIR
        }

        # Ensure coverage-tmp directory exists
        if not ("coverage-tmp" | path exists) {
          mkdir "coverage-tmp"
        }

        print "‚úÖ Test environment ready"

    - name: Run test suites
      shell: nu {0}
      env:
        TEST_SUITES: ${{ inputs.test-suites }}
        VERBOSE: ${{ inputs.verbose }}
      run: |
        $env.CI = "true"
        $env.TEST_TEMP_DIR = "/tmp/nix-mox-tests"

        let test_suites = ($env.TEST_SUITES | split row ",")
        let verbose_flag = if $env.VERBOSE == "true" { ["--verbose"] } else { [] }

        print "üß™ Running test suites: ($test_suites | str join ', ')"

        print $"Current directory: (pwd)"
        print $"GitHub workspace: ${{ github.workspace }}"
        print $"Test script exists: (ls scripts/tests/run-tests.nu | length | $in > 0)"

        try {
          cd ${{ github.workspace }}
          print $"Changed to directory: (pwd)"
          print $"Test script exists after cd: (ls scripts/tests/run-tests.nu | length | $in > 0)"

          let script_path = "scripts/tests/run-tests.nu"
          print $"Using script path: ($script_path)"
          print $"Script exists: (ls $script_path | length | $in > 0)"

          let verbose_args = if $env.VERBOSE == "true" { '["--verbose"]' } else { '[]' }
          nu -c $"source ($script_path); run ($verbose_args)"
          print "‚úÖ All test suites completed successfully"
        } catch { |err|
          print $"‚ùå Test execution failed: ($err)"
          exit 1
        }

    - name: Generate coverage report
      if: inputs.generate-coverage == 'true'
      shell: nu {0}
      run: |
        print "üìä Generating coverage report..."

        # Ensure coverage-tmp directory exists
        if not ("coverage-tmp" | path exists) {
          mkdir "coverage-tmp"
        }

        # Run the LCOV generation script
        try {
          source "scripts/tests/generate-lcov.nu"
          print "‚úÖ LCOV coverage report generated successfully"
        } catch {
          print "‚ö†Ô∏è Failed to generate LCOV report, creating minimal report"
          
          # Create minimal LCOV report
          let minimal_lcov = "TN:\nSF:scripts/tests/run-tests.nu\nFN:1,main\nFNDA:0,main\nDA:1,0\nend_of_record"
          $minimal_lcov | save --force "coverage-tmp/coverage.lcov"
        }

        # Verify coverage file exists
        let coverage_file = (try { ls coverage-tmp/coverage.lcov | get name | first } catch { "" })
        if ($coverage_file | is-empty) {
          print "‚ùå Coverage file not found after generation"
          exit 1
        } else {
          print $"‚úÖ Coverage file found: ($coverage_file)"
        }

        print "‚úÖ Coverage report generated"
