name: 'Run nix-mox Tests'
description: 'Run comprehensive tests for nix-mox with coverage reporting'
inputs:
  test-suites:
    description: 'Test suites to run (unit, integration, storage, performance)'
    required: false
    default: 'unit,integration'
  verbose:
    description: 'Enable verbose output'
    required: false
    default: 'false'
  generate-coverage:
    description: 'Generate coverage report'
    required: false
    default: 'true'
runs:
  using: "composite"
  steps:
    - name: Setup test environment
      shell: nu {0}
      run: |
        $env.CI = "true"
        $env.TEST_TEMP_DIR = "/tmp/nix-mox-tests"

        print "🧪 Setting up test environment..."
        if not ($env.TEST_TEMP_DIR | path exists) {
          mkdir $env.TEST_TEMP_DIR
        }

        print "✅ Test environment ready"

    - name: Run test suites
      shell: nu {0}
      env:
        TEST_SUITES: ${{ inputs.test-suites }}
        VERBOSE: ${{ inputs.verbose }}
      run: |
        $env.CI = "true"
        $env.TEST_TEMP_DIR = "/tmp/nix-mox-tests"

        let test_suites = ($env.TEST_SUITES | split row ",")
        let verbose_flag = if $env.VERBOSE == "true" { "--verbose" } else { "" }

        print "🧪 Running test suites: ($test_suites | str join ', ')"

        print $"Current directory: (pwd)"
        print $"GitHub workspace: ${{ github.workspace }}"
        print $"Test script exists: (ls scripts/tests/run-tests.nu | length | $in > 0)"

        try {
          cd ${{ github.workspace }}
          print $"Changed to directory: (pwd)"
          print $"Test script exists after cd: (ls scripts/tests/run-tests.nu | length | $in > 0)"

          let script_path = "scripts/tests/run-tests.nu"
          print $"Using script path: ($script_path)"
          print $"Script exists: (ls $script_path | length | $in > 0)"

          nu -c $"source ($script_path); run ($verbose_flag)"
          print "✅ All test suites completed successfully"
        } catch { |err|
          print $"❌ Test execution failed: ($err)"
          exit 1
        }

    - name: Generate coverage report
      if: inputs.generate-coverage == 'true'
      shell: nu {0}
      run: |
        print "📊 Generating coverage report..."

        let coverage_file = (try { ls /tmp/nix-mox-tests/coverage.json | get name | first } catch { "" })

        if ($coverage_file | is-empty) {
          print "⚠️ No coverage file found, creating minimal report"

          let minimal_coverage = {
            summary: {
              total_tests: 0
              passed_tests: 0
              failed_tests: 0
              skipped_tests: 0
              test_duration: 0
              pass_rate: 0.0
              timestamp: (date now | format date "%Y-%m-%d %H:%M:%S")
            }
            categories: {}
            results: []
          }

          if not ("coverage-tmp/nix-mox-tests" | path exists) {
            mkdir "coverage-tmp/nix-mox-tests"
          }
          $minimal_coverage | to json | save --force 'coverage-tmp/nix-mox-tests/coverage.json'
        } else {
          print $"📄 Found coverage file: ($coverage_file)"

          if not ("coverage-tmp/nix-mox-tests" | path exists) {
            mkdir "coverage-tmp/nix-mox-tests"
          }
          cp $coverage_file coverage-tmp/nix-mox-tests/coverage.json
        }

        print "✅ Coverage report generated"
